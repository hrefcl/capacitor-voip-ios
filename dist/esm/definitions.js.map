{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface CapacitorVoipIosPlugin {\n  register(options: { topic: string }): Promise<void>;\n\n  incomingCall(options: { from: string }): Promise<void>;\n\n  addListener(\n    eventName: 'registration',\n    listenerFunc: (token: Token) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'callAnswered',\n    listenerFunc: (callDate: CallData) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'callStarted',\n    listenerFunc: (callDate: CallData) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n  \n  addListener(\n    eventName: 'callCancelled',\n    listenerFunc: (callDate: CallData) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n}\n\nexport declare interface Token {\n  token: string;\n}\nexport declare interface CallData {\n  connectionId: string;\n  username?: string;\n  meetingId?: string;\n  joinToken?: string;\n}\n"]}